#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

import os
import sys
import locale
import textwrap
import curses
import socket
from time import sleep
from urllib.request import urlopen
from threading import Thread, Lock
from subprocess import Popen, PIPE

locale.setlocale(locale.LC_ALL, '')


def parse_config(file):
    settings = {}
    try:
        f = open(file, 'r')
    except IOError:
        pass
    else:
        for l in f.read().splitlines():
            if not l.strip().startswith('#') and '=' in l:
                key, value = l.split('=', 1)
                settings[key.strip()] = value.strip()
            else:
                continue
        f.close()

    return settings


def wrap(text, cols):
    wt = ''
    for l in text.splitlines():
        while len(l) > cols:
            wt += l[:cols - 2] + '->' + '\n '
            l = l[cols - 2:]
        wt += l + '\n '

    return wt[:-2]


def wrapwords(text, cols):
    wt = ''
    for l in text.split('\n'):
        for wl in textwrap.wrap(l, cols):
            wt += wl.strip() + '\n '
        wt += '\n '

    return wt.strip()


def process_socket(command, file):
    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    s.connect(file)
    s.send(command.encode())
    s.close()


def process_fifo(command, file):
    f = open(file, 'w')
    f.write(command)
    f.flush()


def metadata_get(type, artist, title, lang):
    if ((type == 'lyrics' and (artist == 'N/A' or title == 'N/A')) or
        (type == 'artistbio' and artist == 'N/A') or
        (type == 'guitartabs' and (artist == 'N/A' or title == 'N/A'))):
        m = 'Missing tags.'
    else:
        try:
            cache_dir = os.environ['XDG_CACHE_HOME'] + '/lyvi'
        except KeyError:
            cache_dir = os.environ['HOME'] + '/.cache/lyvi'
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)

        m = Popen(['glyrc', type, '-a', artist, '-t', title,
                   '-v', '0', '-w', 'stdout', '--callback', 'cat <path>',
                   '-l', lang, '-c', cache_dir],
                  stdout=PIPE, stderr=PIPE) \
            .communicate()[0].decode().strip()

        if m == '':
            m = 'No %s found.' % type

    return m


def get_and_update(artist, title, data):
    lyrics = metadata_get('lyrics', artist, title, data['lang'])
    artistbio = metadata_get('artistbio', artist, title, data['lang'])
    guitartabs = metadata_get('guitartabs', artist, title, data['lang'])
    data['lock'].acquire()
    try:
        if data['ui'].artist + data['ui'].title == artist + title:
            data['ui'].lyrics = lyrics
            data['ui'].artistbio = artistbio
            data['ui'].guitartabs = guitartabs
            data['ui'].update()
    finally:
        data['lock'].release()


class cmus:
    def command(self, command):
        if command == 'play':
            os.system('cmus-remote -p')
        elif command == 'pause':
            os.system('cmus-remote -u')
        elif command == 'next':
            os.system('cmus-remote -n')
        elif command == 'prev':
            os.system('cmus-remote -r')
        elif command == 'stop':
            os.system('cmus-remote -s')
        elif command == 'volup':
            os.system('cmus-remote -v +5%')
        elif command == 'voldn':
            os.system('cmus-remote -v -5%')

    def status(self):
        if not os.path.exists(os.environ['HOME'] + '/.cmus/socket'):
            sys.exit()

        s = Popen(['cmus-remote', '-Q'],
                  stdout=PIPE, stderr=PIPE).communicate()[0].decode()

        if 'status stopped' in s:
            self.playing = False
        else:
            self.playing = True

        if 'tag artist' in s:
            self.artist = s.split('tag artist ')[1].splitlines()[0]
        else:
            self.artist = 'N/A'

        if 'tag title' in s:
            self.title = s.split('tag title ')[1].splitlines()[0]
        else:
            self.title = 'N/A'


class shellfm:
    def command(self, command):
        socket = os.environ['HOME'] + '/.shell-fm/socket'

        if command == 'pause':
            process_socket('pause\n', socket)
        elif command == 'next':
            process_socket('skip\n', socket)
        elif command == 'stop':
            process_socket('stop\n', socket)
        elif command == 'volup':
            process_socket('volume +5\n', socket)
        elif command == 'voldn':
            process_socket('volume -5\n', socket)

    def status(self):
        if not os.path.exists(os.environ['HOME'] + '/.shell-fm/session'):
            sys.exit()

        try:
            np = open(os.environ['HOME'] + '/.shell-fm/nowplaying')
        except IOError:
            self.playing = False
            self.artist = 'N/A'
            self.title = 'N/A'
        else:
            self.playing = True
            self.artist, self.title = np.read().split('|')
            np.close()


class pianobar:
    def __init__(self):
        try:
            self.config_dir = os.environ['XDG_CONFIG_HOME'] + '/pianobar/'
        except KeyError:
            self.config_dir = os.environ['HOME'] + '/.config/pianobar/'

        # set default keys
        self.settings = {'key_pause': 'p',
                         'key_next': 'n',
                         'key_stop': 'q',
                         'key_volup': ')',
                         'key_voldn': '('}

        self.settings.update(parse_config(self.config_dir + 'config'))

    def command(self, command):
        fifo = self.config_dir + 'ctl'

        if command == 'play':
            process_fifo(self.settings['key_pause'] + '\n', fifo)
        elif command == 'pause':
            process_fifo(self.settings['key_pause'] + '\n', fifo)
        elif command == 'next':
            process_fifo(self.settings['key_next'] + '\n', fifo)
        elif command == 'stop':
            process_fifo(self.settings['key_stop'] + '\n', fifo)
        elif command == 'volup':
            process_fifo(self.settings['key_volup'] + '\n', fifo)
        elif command == 'voldn':
            process_fifo(self.settings['key_voldn'] + '\n', fifo)

    def status(self):
        np = self.config_dir + 'nowplaying'
        if 'pianobar' not in Popen(['ps', '-C', 'pianobar'],
                                   stdout=PIPE, stderr=PIPE) \
                             .communicate()[0].decode():
            if os.path.exists(np):
                os.remove(np)
            sys.exit()

        try:
            f = open(np)
        except IOError:
            self.playing = False
            self.artist = 'N/A'
            self.title = 'N/A'
        else:
            self.playing = True
            self.artist, self.title = f.read().split('|')
            f.close()


class mpd:
    def command(self, command):
        if command == 'play':
            os.system('mpc play > /dev/null')
        elif command == 'pause':
            os.system('mpc pause > /dev/null')
        elif command == 'next':
            os.system('mpc next > /dev/null')
        elif command == 'prev':
            os.system('mpc prev > /dev/null')
        elif command == 'stop':
            os.system('mpc stop > /dev/null')
        elif command == 'volup':
            os.system('mpc volume +5 > /dev/null')
        elif command == 'voldn':
            os.system('mpc volume -5 > /dev/null')

    def status(self):
        if 'mpd' not in Popen(['ps', '-C', 'mpd'],
                              stdout=PIPE, stderr=PIPE) \
                        .communicate()[0].decode():
            sys.exit()

        s = Popen(['mpc', 'current', '-f', '%artist%\\%title%'],
                  stdout=PIPE, stderr=PIPE).communicate()[0].decode()

        try:
            self.artist = s.split('\\')[0]
            if self.artist == '':
                self.artist = 'N/A'

            self.title = s.split('\\')[1].strip()
            if self.title == '':
                self.title = 'N/A'
        except IndexError:
            self.artist = 'N/A'
            self.title = 'N/A'
            self.playing = False
        else:
            self.playing = True


class moc:
    def command(self, command):
        if command == 'play':
            os.system('mocp -U 2> /dev/null')
        elif command == 'pause':
            os.system('mocp -P 2> /dev/null')
        elif command == 'next':
            os.system('mocp -f 2> /dev/null')
        elif command == 'prev':
            os.system('mocp -r 2> /dev/null')
        elif command == 'stop':
            os.system('mocp -s 2> /dev/null')
        elif command == 'volup':
            os.system('mocp --volume +5 2> /dev/null')
        elif command == 'voldn':
            os.system('mocp --volume -5 2> /dev/null')

    def status(self):
        if not os.path.exists(os.environ['HOME'] + '/.moc/pid'):
            sys.exit()

        s = Popen(['mocp', '-i'], stdout=PIPE, stderr=PIPE) \
            .communicate()[0].decode()

        if 'State: PLAY' in s or 'State: PAUSE' in s:
            self.playing = True

            if 'Artist: \n' not in s:
                self.artist = s.split('Artist: ')[1].splitlines()[0]
            else:
                self.artist = 'N/A'

            if 'SongTitle: \n' not in s:
                self.title = s.split('SongTitle: ')[1].splitlines()[0]
            else:
                self.title = 'N/A'
        else:
            self.playing = False
            self.artist = 'N/A'
            self.title = 'N/A'


class mplayer:
    def command(self, command):
        fifo = os.environ['HOME'] + '/.mplayer/fifo'

        if command == 'play':
            process_fifo('pause\n', fifo)
        elif command == 'pause':
            process_fifo('pause\n', fifo)
        elif command == 'next':
            process_fifo('pt_step 1\n', fifo)
        elif command == 'prev':
            process_fifo('pt_step -1\n', fifo)
        elif command == 'stop':
            process_fifo('stop\n', fifo)
        elif command == 'volup':
            process_fifo('volume +1\n', fifo)
        elif command == 'voldn':
            process_fifo('volume -1\n', fifo)

    def status(self):
        log = os.environ['HOME'] + '/.mplayer/log'
        if 'mplayer' not in Popen(['ps', '-C', 'mplayer'],
            stdout=PIPE, stderr=PIPE).communicate()[0].decode():
            if os.path.exists(log):
                os.remove(log)
            sys.exit()

        self.playing = True
        f = open(log)
        s = f.read().split('AUDIO_ID')[-1]
        f.close()
        if 'VALUE0' in s:
            self.title = s.split('VALUE0=')[-1].splitlines()[0]
        else:
            self.title = 'N/A'
        if 'VALUE1' in s:
            self.artist = s.split('VALUE1=')[-1].splitlines()[0]
        else:
            self.artist = 'N/A'


class vlc:
    def command(self, command):
        socket = '/tmp/vlc.sock'

        if command == 'play':
            process_socket('pause\n', socket)
        if command == 'pause':
            process_socket('pause\n', socket)
        elif command == 'next':
            process_socket('next\n', socket)
        elif command == 'prev':
            process_socket('prev\n', socket)
        elif command == 'stop':
            process_socket('stop\n', socket)
        elif command == 'volup':
            process_socket('volup 1\n', socket)
        elif command == 'voldn':
            process_socket('voldown 1\n', socket)

    def status(self):
        if not os.path.exists('/tmp/vlc.sock'):
            sys.exit()

        s = urlopen('http://localhost:8080/requests/status.xml').read() \
            .decode()
        if '<state>stopped</state>' in s:
            self.playing = False
        else:
            self.playing = True
        if 'name=\'artist\'>' in s:
            self.artist = s.split('name=\'artist\'>')[1].split('</info>')[0]
        else:
            self.artist = 'N/A'
        if 'name=\'title\'>' in s:
            self.title = s.split('name=\'title\'>')[1].split('</info>')[0]
        else:
            self.title = 'N/A'


class ui:
    def __init__(self, screen, data):
        self.quit = False
        self.screen = screen

        self.get_size()
        curses.noecho()
        curses.cbreak()
        curses.curs_set(0)
        curses.use_default_colors()
        self.screen.keypad(1)

        self.artist = ''
        self.title = ''
        self.lyrics = ''
        self.artistbio = ''
        self.guitartabs = ''

        self.settings = data['settings']
        self.player = data['player']

        # init colors
        curses.init_pair(1, int(self.settings['color_title']), -1)
        curses.init_pair(2, int(self.settings['color_text']), -1)
        curses.init_pair(3, int(self.settings['color_status']), -1)

    def get_size(self):
        self.rows, self.cols = self.screen.getmaxyx()

    def update_statusbar(self):
        if self.pad_lines <= self.rows - 1:
            pos_perc = 'All'
        elif self.pos_y == 0:
            pos_perc = 'Top'
        elif self.pos_y > self.pad_lines - self.rows:
            pos_perc = 'Bot'
        else:
            pos_perc = str(int((100 / float(self.pad_lines - self.rows)) \
                               * self.pos_y - 1)) + '%'

        self.get_size()
        self.statusbar.erase()
        self.statusbar.addstr(0, self.cols - len(pos_perc) - 1, pos_perc,
                              curses.color_pair(3))
        self.statusbar.addstr(0, self.cols - len(self.settings['view']) - 10,
                              self.settings['view'], curses.color_pair(3))
        self.statusbar.refresh()

    def update(self):
        self.get_size()
        self.pos_y = 0
        if self.settings['view'] == 'lyrics':
            self.header = self.artist + ' - ' + self.title
            self.text = self.lyrics
            text_wrap = wrap(self.text, self.cols - 2)
        elif self.settings['view'] == 'artistbio':
            self.header = self.artist
            self.text = self.artistbio
            text_wrap = wrapwords(self.text, self.cols - 2)
        elif self.settings['view'] == 'guitartabs':
            self.header = self.artist + ' - ' + self.title
            self.text = self.guitartabs
            text_wrap = wrap(self.text, self.cols - 2)
        header_wrap = wrap(self.header, self.cols - 2)
        header_wrap_lines = len(header_wrap.splitlines())
        text_wrap_lines = len(text_wrap.splitlines())
        self.pad_lines = header_wrap_lines + 1 + text_wrap_lines

        # main window
        self.pad = curses.newpad(self.pad_lines + self.rows, self.cols)
        self.pad.addstr(0, 1, header_wrap,
                        curses.color_pair(1) | curses.A_BOLD)
        self.pad.addstr(header_wrap_lines + 1, 1, text_wrap,
                        curses.color_pair(2))
        self.pad.refresh(0, 0, 0, 0, self.rows - 2, self.cols)

        # statusbar
        self.statusbar = curses.newwin(1, self.cols, self.rows - 1, 0)
        self.statusbar.resize(1, self.cols)
        self.update_statusbar()

    def control(self):
        while True:
            key = self.screen.getch()

            if key == ord(self.settings['key_quit']):
                self.quit = True

            else:
                if key == curses.KEY_DOWN or key == ord('j'):
                    if self.pos_y < self.pad_lines - self.rows + 1:
                        self.pos_y += 1

                elif key == curses.KEY_NPAGE or key == curses.KEY_RIGHT:
                    if self.pos_y < self.pad_lines - self.rows + 1:
                        self.pos_y += self.rows - 1

                elif key == curses.KEY_END or key == ord('G'):
                    if self.pos_y < self.pad_lines - self.rows + 1:
                        self.pos_y = self.pad_lines - self.rows + 1

                elif key == curses.KEY_UP or key == ord('k'):
                    if self.pos_y > 0:
                        self.pos_y -= 1

                elif key == curses.KEY_PPAGE or key == curses.KEY_LEFT:
                    if self.pos_y - self.rows > 0:
                        self.pos_y -= self.rows - 1
                    else:
                        self.pos_y = 0

                elif key == curses.KEY_HOME or key == ord('g'):
                    self.pos_y = 0

                elif key == curses.KEY_RESIZE:
                    self.update()

                elif key == ord(self.settings['key_toggle']):
                    if self.settings['view'] == 'lyrics':
                        self.settings['view'] = 'artistbio'
                    elif self.settings['view'] == 'artistbio':
                        self.settings['view'] = 'guitartabs'
                    elif self.settings['view'] == 'guitartabs':
                        self.settings['view'] = 'lyrics'
                    self.update()

                elif key == ord(self.settings['key_play']):
                    self.player.command('play')

                elif key == ord(self.settings['key_pause']):
                    self.player.command('pause')

                elif key == ord(self.settings['key_next']):
                    self.player.command('next')

                elif key == ord(self.settings['key_prev']):
                    self.player.command('prev')

                elif key == ord(self.settings['key_stop']):
                    self.player.command('stop')

                elif key == ord(self.settings['key_volup']):
                    self.player.command('volup')

                elif key == ord(self.settings['key_voldn']):
                    self.player.command('voldn')

                self.pad.refresh(self.pos_y, 0, 0, 0, self.rows - 2, self.cols)
                self.update_statusbar()


def main(stdscr):
    try:
        config_file = os.environ['XDG_CONFIG_HOME'] + '/lyvi/rc'
    except KeyError:
        config_file = os.environ['HOME'] + '/.config/lyvi/rc'

    # default settings
    settings = {'lang': 'en',
                'view': 'lyrics',
                'key_quit': 'q',
                'key_toggle': 'a',
                'key_play': 'x',
                'key_pause': 'c',
                'key_next': 'b',
                'key_prev': 'z',
                'key_stop': 'v',
                'key_volup': '=',
                'key_voldn': '-',
                'color_title': 7,
                'color_text': -1,
                'color_status': -1}

    settings.update(parse_config(config_file))

    u = ui(stdscr, {'player': p, 'settings': settings})

    ui_control = Thread(target=u.control)
    ui_control.daemon = True
    ui_control.start()

    lock = Lock()
    data = {'ui': u, 'lock': lock, 'lang': settings['lang']}

    while True:
        if u.quit == True:
            break

        p.status()

        if p.playing == True:
            if p.artist != u.artist or p.title != u.title:
                lock.acquire()
                try:
                    u.artist = p.artist
                    u.title = p.title
                    u.lyrics = 'Downloading lyrics...'
                    u.artistbio = 'Downloading artist info...'
                    u.guitartabs = 'Downloading guitar tab...'
                    u.update()
                finally:
                    lock.release()

                worker = Thread(target=get_and_update,
                                args=(p.artist, p.title, data))
                worker.daemon = True
                worker.start()
        else:
            u.artist = p.artist
            u.title = p.title
            u.lyrics = 'Not playing'
            u.artistbio = 'Not playing'
            u.guitartabs = 'Not playing'
            u.update()

        sleep(1)


if __name__ == '__main__':
    if os.path.exists(os.environ['HOME'] + '/.cmus/socket'):
        p = cmus()
    elif os.path.exists(os.environ['HOME'] + '/.shell-fm/session'):
        p = shellfm()
    elif 'pianobar' in os.popen('ps -C pianobar').read():
        p = pianobar()
    elif 'mpd' in os.popen('ps -C mpd').read():
        p = mpd()
    elif os.path.exists(os.environ['HOME'] + '/.moc/pid'):
        p = moc()
    elif 'mplayer' in os.popen('ps -C mplayer').read():
        p = mplayer()
    elif os.path.exists('/tmp/vlc.sock'):
        p = vlc()
    else:
        print('No supported player found.')
        sys.exit()

    if len(sys.argv) > 1:
        p.command(sys.argv[1])
    else:
        curses.wrapper(main)
