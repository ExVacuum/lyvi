#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

import os
import sys
import locale
import curses
import curses.wrapper
from time import sleep
from threading import Thread

locale.setlocale(locale.LC_ALL, '')


def wrap(text, cols):
    wrapped_text = ''
    for line in text.split('\n'):
        while len(line) > cols:
            wrapped_text += line[:cols - 2] + '->' + '\n'
            line = line[cols - 2:]
        wrapped_text += line + '\n'

    return wrapped_text[:-1]


class cmus:
    def status(self):
        if not os.path.exists(os.environ['HOME'] + '/.cmus/socket'):
            sys.exit()

        s = os.popen('cmus-remote -Q').read()
        try:
            self.artist = s.split('tag artist ')[1].split('\n')[0]
            self.title = s.split('tag title ')[1].split('\n')[0]
        except IndexError:
            self.artist = 'N/A'
            self.title = 'N/A'


class shellfm:
    def status(self):
        if not os.path.exists(os.environ['HOME'] + '/.shell-fm/session'):
            sys.exit()

        try:
            f = open(os.environ['HOME'] + '/.shell-fm/nowplaying')
        except IOError:
            self.artist = 'N/A'
            self.title = 'N/A'
        else:
            s = f.read()
            f.close()
            self.artist, self.title = s.split(' | ')


class pianobar:
    def status(self):
        try:
            np = os.environ['XDG_CONFIG_HOME'] + '/pianobar/nowplaying'
        except KeyError:
            np = os.environ['HOME'] + '/.config/pianobar/nowplaying'
        if 'pianobar' not in os.popen('ps -C pianobar').read():
            if os.path.exists(np):
                os.remove(np)
            sys.exit()

        try:
            f = open(np)
        except IOError:
            self.artist = 'N/A'
            self.title = 'N/A'
        else:
            s = f.read().strip()
            f.close()
            self.artist, self.title = s.split(' | ')


class lyrics:
    def get(self, artist, title):
        if artist == 'N/A' and title == 'N/A':
            self.lyrics = 'Not playing'
        else:
            try:
                cache_dir = os.environ['XDG_CACHE_HOME'] + '/cmus-lyrics'
            except KeyError:
                cache_dir = os.environ['HOME'] + '/.cache/cmus-lyrics'
            if not os.path.exists(cache_dir):
                os.makedirs(cache_dir)

            self.lyrics = os.popen('glyrc lyrics \
                                   -a "%s" \
                                   -t "%s" \
                                   -v 0 \
                                   -w stdout \
                                   --callback "cat <path>" \
                                   -c %s' % (artist, title, cache_dir)) \
                                   .read().strip()

            if self.lyrics == '':
                self.lyrics = 'No lyrics found.'


class ui:
    def init(self, screen):
        self.quit = False
        self.screen = screen

        self.get_size()
        curses.noecho()
        curses.cbreak()
        curses.curs_set(0)
        curses.use_default_colors()
        self.screen.keypad(1)

    def get_size(self):
        self.rows, self.cols = self.screen.getmaxyx()

    def update(self, header, text):
        self.header = header
        self.text = text
        self.pos_y = 0
        self.header_wrapped = wrap(header, self.cols - 1)
        self.text_wrapped = wrap(text, self.cols - 1)
        self.header_wrapped_lines = len(self.header_wrapped.split('\n'))
        self.text_wrapped_lines = len(self.text_wrapped.split('\n'))
        self.pad_lines = self.header_wrapped_lines + 1 + self.text_wrapped_lines

        self.pad = curses.newpad(self.pad_lines + self.rows, self.cols)
        self.pad.addstr(0, 0, self.header_wrapped, curses.A_BOLD)
        self.pad.addstr(self.header_wrapped_lines + 1, 0, self.text_wrapped)
        self.pad.refresh(0, 0, 0, 0, self.rows - 1, self.cols)

    def control(self):
        while True:
            key = self.screen.getch()

            if key == ord('q'):
                self.quit = True

            else:
                if key == curses.KEY_DOWN or key == ord('j'):
                    if self.pos_y < self.pad_lines - self.rows:
                        self.pos_y += 1

                elif key == curses.KEY_NPAGE or key == curses.KEY_RIGHT:
                    if self.pos_y + self.rows < self.pad_lines:
                        self.pos_y += self.rows

                elif key == curses.KEY_END or key == ord('G'):
                    if self.pos_y < self.pad_lines - self.rows:
                        self.pos_y = self.pad_lines - self.rows

                elif key == curses.KEY_UP or key == ord('k'):
                    if self.pos_y > 0:
                        self.pos_y -= 1

                elif key == curses.KEY_PPAGE or key == curses.KEY_LEFT:
                        if self.pos_y - self.rows > 0:
                            self.pos_y -= self.rows
                        else:
                            self.pos_y = 0

                elif key == curses.KEY_HOME or key == ord('g'):
                    self.pos_y = 0

                elif key == curses.KEY_RESIZE:
                    self.get_size()
                    self.update(self.header, self.text)

                self.pad.refresh(self.pos_y, 0, 0, 0, self.rows - 1, self.cols)


def main(stdscr):
    if player == cmus:
        p = cmus()
    elif player == shellfm:
        p = shellfm()
    elif player == pianobar:
        p = pianobar()

    l = lyrics()
    u = ui()
    u.init(stdscr)

    ui_control = Thread(target=u.control)
    ui_control.daemon = True
    ui_control.start()

    artist_prev = ''
    title_prev = ''

    while True:
        p.status()

        if u.quit == True:
            break

        if p.artist != artist_prev or p.title != title_prev:
            u.update(p.artist + ' - ' + p.title, 'Downloading lyrics...')
            l.get(p.artist, p.title)
            u.update(p.artist + ' - ' + p.title, l.lyrics)
            artist_prev = p.artist
            title_prev = p.title

        sleep(1)


if __name__ == '__main__':
    if os.path.exists(os.environ['HOME'] + '/.cmus/socket'):
        player = cmus
    elif os.path.exists(os.environ['HOME'] + '/.shell-fm/session'):
        player = shellfm
    elif 'pianobar' in os.popen('ps -C pianobar').read():
        player = pianobar
    else:
        print 'No supported player found.'
        sys.exit()

    curses.wrapper(main)
